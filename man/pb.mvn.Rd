% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pb.mvn.R
\name{pb.mvn}
\alias{pb.mvn}
\title{Parametric Bootstrapping Assuming Multivariate Normal Distribution (Sampling Distribution)}
\usage{
pb.mvn(
  muthetahat,
  Sigmathetahat,
  n,
  std = FALSE,
  B = 5000,
  par = TRUE,
  ncores = NULL,
  blas_threads = TRUE,
  mc = TRUE,
  lb = FALSE
)
}
\arguments{
\item{muthetahat}{Numeric vector.
Model-implied mean vector \eqn{ \boldsymbol{\mu} \left( \boldsymbol{\hat{\theta}} \right) } .}

\item{Sigmathetahat}{Numeric matrix.
Model-implied variance-covariance matrix \eqn{ \boldsymbol{\Sigma} \left( \boldsymbol{\hat{\theta}} \right) } .}

\item{n}{Integer.
Sample size.}

\item{std}{Logical.
Standardize the indirect effect
\eqn{
    \hat{\alpha}^{\prime} \hat{\beta}^{\prime}
    = \hat{\alpha} \hat{\beta} \frac{\hat{\sigma}_x}{\hat{\sigma}_y}}.}

\item{B}{Integer.
Number of bootstrap samples.}

\item{par}{Logical.
If \code{TRUE}, use multiple cores.
If \code{FALSE}, use \code{\link[=lapply]{lapply()}}.}

\item{ncores}{Integer.
Number of cores to use if \code{par = TRUE}.
If unspecified, defaults to \code{detectCores() - 1}.}

\item{blas_threads}{Logical.
If \code{TRUE}, set BLAS threads using \code{blas_set_num_threads(threads = blas_get_num_procs())}.
If \code{FALSE}, set BLAS threads using \code{blas_set_num_threads(threads = 1)}.
If \code{par = TRUE}, \code{blas_threads} is automatically set to \code{FALSE}
to prevent conflicts in parallel processing.
This argument is useful when \code{FUN} can handle implicit parallelism
when \code{par = FALSE}, for example linear algebra operations.}

\item{mc}{Logical.
If \code{TRUE}, use \code{\link[parallel:mclapply]{parallel::mclapply()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}} or \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
Ignored if \code{par = FALSE}.}

\item{lb}{Logical.
If \code{TRUE} use \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}}.
Ignored if \code{par = FALSE} and \code{mc = TRUE}.}
}
\description{
Parametric Bootstrapping Assuming Multivariate Normal Distribution (Sampling Distribution)
}
\examples{
muthetahat <- mutheta(
  mux = 70.18000,
  deltam = 26.82246,
  deltay = 29.91071,
  taudot = 0.207648,
  beta = 0.451039,
  alpha = 0.338593
)
Sigmathetahat <- Sigmatheta(
  taudot = 0.207648,
  beta = 0.451039,
  alpha = 0.338593,
  sigma2x = 1.293469,
  sigma2epsilonm = 0.9296691,
  sigma2epsilony = 0.9310597
)

# Unstandardized -------------------------------------------------------------
thetahatstar <- pb.mvn(
  mutheta = muthetahat, Sigmatheta = Sigmathetahat, n = 50, B = 5000, par = FALSE
)
hist(thetahatstar)

# Standardized ---------------------------------------------------------------
thetahatstar <- pb.mvn(
  mutheta = muthetahat, Sigmatheta = Sigmathetahat, n = 50, std = TRUE, B = 5000, par = FALSE
)
hist(thetahatstar)
}
\seealso{
Other parametric functions: 
\code{\link{mvn_mar_10_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mar_10_pb.mvn_bcci_task}()},
\code{\link{mvn_mar_10_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mar_10_pb.mvn_pcci_task}()},
\code{\link{mvn_mar_10_pb.mvn_simulation}()},
\code{\link{mvn_mar_10_pb.mvn_task}()},
\code{\link{mvn_mar_10_pb.mvn}()},
\code{\link{mvn_mar_20_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mar_20_pb.mvn_bcci_task}()},
\code{\link{mvn_mar_20_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mar_20_pb.mvn_pcci_task}()},
\code{\link{mvn_mar_20_pb.mvn_simulation}()},
\code{\link{mvn_mar_20_pb.mvn_task}()},
\code{\link{mvn_mar_20_pb.mvn}()},
\code{\link{mvn_mar_30_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mar_30_pb.mvn_bcci_task}()},
\code{\link{mvn_mar_30_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mar_30_pb.mvn_pcci_task}()},
\code{\link{mvn_mar_30_pb.mvn_simulation}()},
\code{\link{mvn_mar_30_pb.mvn_task}()},
\code{\link{mvn_mar_30_pb.mvn}()},
\code{\link{mvn_mcar_10_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mcar_10_pb.mvn_bcci_task}()},
\code{\link{mvn_mcar_10_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mcar_10_pb.mvn_pcci_task}()},
\code{\link{mvn_mcar_10_pb.mvn_simulation}()},
\code{\link{mvn_mcar_10_pb.mvn_task}()},
\code{\link{mvn_mcar_10_pb.mvn}()},
\code{\link{mvn_mcar_20_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mcar_20_pb.mvn_bcci_task}()},
\code{\link{mvn_mcar_20_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mcar_20_pb.mvn_pcci_task}()},
\code{\link{mvn_mcar_20_pb.mvn_simulation}()},
\code{\link{mvn_mcar_20_pb.mvn_task}()},
\code{\link{mvn_mcar_20_pb.mvn}()},
\code{\link{mvn_mcar_30_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mcar_30_pb.mvn_bcci_task}()},
\code{\link{mvn_mcar_30_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mcar_30_pb.mvn_pcci_task}()},
\code{\link{mvn_mcar_30_pb.mvn_simulation}()},
\code{\link{mvn_mcar_30_pb.mvn_task}()},
\code{\link{mvn_mcar_30_pb.mvn}()},
\code{\link{mvn_mnar_10_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mnar_10_pb.mvn_bcci_task}()},
\code{\link{mvn_mnar_10_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mnar_10_pb.mvn_pcci_task}()},
\code{\link{mvn_mnar_10_pb.mvn_simulation}()},
\code{\link{mvn_mnar_10_pb.mvn_task}()},
\code{\link{mvn_mnar_10_pb.mvn}()},
\code{\link{mvn_mnar_20_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mnar_20_pb.mvn_bcci_task}()},
\code{\link{mvn_mnar_20_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mnar_20_pb.mvn_pcci_task}()},
\code{\link{mvn_mnar_20_pb.mvn_simulation}()},
\code{\link{mvn_mnar_20_pb.mvn_task}()},
\code{\link{mvn_mnar_20_pb.mvn}()},
\code{\link{mvn_mnar_30_pb.mvn_bcci_simulation}()},
\code{\link{mvn_mnar_30_pb.mvn_bcci_task}()},
\code{\link{mvn_mnar_30_pb.mvn_pcci_simulation}()},
\code{\link{mvn_mnar_30_pb.mvn_pcci_task}()},
\code{\link{mvn_mnar_30_pb.mvn_simulation}()},
\code{\link{mvn_mnar_30_pb.mvn_task}()},
\code{\link{mvn_mnar_30_pb.mvn}()},
\code{\link{mvn_pb.mvn_bcaci_simulation}()},
\code{\link{mvn_pb.mvn_bcaci_task}()},
\code{\link{mvn_pb.mvn_bcci_simulation}()},
\code{\link{mvn_pb.mvn_bcci_task}()},
\code{\link{mvn_pb.mvn_pcci_simulation}()},
\code{\link{mvn_pb.mvn_pcci_task}()},
\code{\link{mvn_pb.mvn_simulation}()},
\code{\link{mvn_pb.mvn_task}()},
\code{\link{mvn_pb.mvn}()},
\code{\link{mvn_std_pb.mvn_bcaci_simulation}()},
\code{\link{mvn_std_pb.mvn_bcaci_task}()},
\code{\link{mvn_std_pb.mvn_bcci_simulation}()},
\code{\link{mvn_std_pb.mvn_bcci_task}()},
\code{\link{mvn_std_pb.mvn_pcci_simulation}()},
\code{\link{mvn_std_pb.mvn_pcci_task}()},
\code{\link{mvn_std_pb.mvn_simulation}()},
\code{\link{mvn_std_pb.mvn_task}()},
\code{\link{mvn_std_pb.mvn}()},
\code{\link{pb.vm}()},
\code{\link{vm_mod_pb.mvn_bcaci_simulation}()},
\code{\link{vm_mod_pb.mvn_bcaci_task}()},
\code{\link{vm_mod_pb.mvn_bcci_simulation}()},
\code{\link{vm_mod_pb.mvn_bcci_task}()},
\code{\link{vm_mod_pb.mvn_pcci_simulation}()},
\code{\link{vm_mod_pb.mvn_pcci_task}()},
\code{\link{vm_mod_pb.mvn_simulation}()},
\code{\link{vm_mod_pb.mvn_task}()},
\code{\link{vm_mod_pb.mvn}()},
\code{\link{vm_mod_pb.vm_bcaci_simulation}()},
\code{\link{vm_mod_pb.vm_bcaci_task}()},
\code{\link{vm_mod_pb.vm_bcci_simulation}()},
\code{\link{vm_mod_pb.vm_bcci_task}()},
\code{\link{vm_mod_pb.vm_pcci_simulation}()},
\code{\link{vm_mod_pb.vm_pcci_task}()},
\code{\link{vm_mod_pb.vm_simulation}()},
\code{\link{vm_mod_pb.vm_task}()},
\code{\link{vm_mod_pb.vm}()},
\code{\link{vm_mod_std_pb.mvn_bcaci_simulation}()},
\code{\link{vm_mod_std_pb.mvn_bcaci_task}()},
\code{\link{vm_mod_std_pb.mvn_bcci_simulation}()},
\code{\link{vm_mod_std_pb.mvn_bcci_task}()},
\code{\link{vm_mod_std_pb.mvn_pcci_simulation}()},
\code{\link{vm_mod_std_pb.mvn_pcci_task}()},
\code{\link{vm_mod_std_pb.mvn_simulation}()},
\code{\link{vm_mod_std_pb.mvn_task}()},
\code{\link{vm_mod_std_pb.mvn}()},
\code{\link{vm_sev_pb.mvn_bcaci_simulation}()},
\code{\link{vm_sev_pb.mvn_bcaci_task}()},
\code{\link{vm_sev_pb.mvn_bcci_simulation}()},
\code{\link{vm_sev_pb.mvn_bcci_task}()},
\code{\link{vm_sev_pb.mvn_pcci_simulation}()},
\code{\link{vm_sev_pb.mvn_pcci_task}()},
\code{\link{vm_sev_pb.mvn_simulation}()},
\code{\link{vm_sev_pb.mvn_task}()},
\code{\link{vm_sev_pb.mvn}()},
\code{\link{vm_sev_pb.vm_bcaci_simulation}()},
\code{\link{vm_sev_pb.vm_bcaci_task}()},
\code{\link{vm_sev_pb.vm_bcci_simulation}()},
\code{\link{vm_sev_pb.vm_bcci_task}()},
\code{\link{vm_sev_pb.vm_pcci_simulation}()},
\code{\link{vm_sev_pb.vm_pcci_task}()},
\code{\link{vm_sev_pb.vm_simulation}()},
\code{\link{vm_sev_pb.vm_task}()},
\code{\link{vm_sev_pb.vm}()},
\code{\link{vm_sev_std_pb.mvn_bcaci_simulation}()},
\code{\link{vm_sev_std_pb.mvn_bcaci_task}()},
\code{\link{vm_sev_std_pb.mvn_bcci_simulation}()},
\code{\link{vm_sev_std_pb.mvn_bcci_task}()},
\code{\link{vm_sev_std_pb.mvn_pcci_simulation}()},
\code{\link{vm_sev_std_pb.mvn_pcci_task}()},
\code{\link{vm_sev_std_pb.mvn_simulation}()},
\code{\link{vm_sev_std_pb.mvn_task}()},
\code{\link{vm_sev_std_pb.mvn}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{parametric functions}
\keyword{pb}
