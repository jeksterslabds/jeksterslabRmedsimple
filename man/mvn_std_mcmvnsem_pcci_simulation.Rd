% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcstdsem.R
\name{mvn_std_mcmvnsem_pcci_simulation}
\alias{mvn_std_mcmvnsem_pcci_simulation}
\title{Monte Carlo Method Confidence Intervals for Indirect Effect in a Simple Mediation Model Assuming \eqn{t} Distribution
for Data Generated from a Multivariate Normal Distribution (Simulation)}
\usage{
mvn_std_mcmvnsem_pcci_simulation(
  dir = getwd(),
  all = TRUE,
  taskid = NULL,
  alpha = c(0.001, 0.01, 0.05),
  par = TRUE,
  ncores = NULL,
  blas_threads = TRUE,
  mc = TRUE,
  lb = FALSE,
  cl_eval = FALSE,
  cl_export = FALSE,
  cl_expr,
  cl_vars
)
}
\arguments{
\item{dir}{Character string.
Directory where results of \verb{mvn_dat_*} are stored.}

\item{all}{Logical.
Process all results.}

\item{taskid}{Numeric.
Task ID.}

\item{alpha}{Numeric vector.
Alpha level.
By default \code{alpha = c(0.001, 0.01, 0.05)}.}

\item{par}{Logical.
If \code{TRUE}, use multiple cores.
If \code{FALSE}, use \code{\link[=lapply]{lapply()}}.}

\item{ncores}{Integer.
Number of cores to use if \code{par = TRUE}.
If unspecified, defaults to \code{detectCores() - 1}.}

\item{blas_threads}{Logical.
If \code{TRUE}, set BLAS threads using \code{blas_set_num_threads(threads = blas_get_num_procs())}.
If \code{FALSE}, set BLAS threads using \code{blas_set_num_threads(threads = 1)}.
If \code{par = TRUE}, \code{blas_threads} is automatically set to \code{FALSE}
to prevent conflicts in parallel processing.
This argument is useful when \code{FUN} can handle implicit parallelism
when \code{par = FALSE}, for example linear algebra operations.}

\item{mc}{Logical.
If \code{TRUE}, use \code{\link[parallel:mclapply]{parallel::mclapply()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}} or \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
Ignored if \code{par = FALSE}.}

\item{lb}{Logical.
If \code{TRUE} use \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}}.
Ignored if \code{par = FALSE} and \code{mc = TRUE}.}

\item{cl_eval}{Logical.
Execute \code{\link[parallel:clusterApply]{parallel::clusterEvalQ()}} using \code{cl_expr}.
Ignored if \code{mc = TRUE}.}

\item{cl_export}{Logical.
Execute \code{\link[parallel:clusterApply]{parallel::clusterExport()}} using \code{cl_vars}.
Ignored if \code{mc = TRUE}.}

\item{cl_expr}{Expression.
Expression passed to \code{\link[parallel:clusterApply]{parallel::clusterEvalQ()}}
Ignored if \code{mc = TRUE}.}

\item{cl_vars}{Character vector.
Names of objects to pass to \code{\link[parallel:clusterApply]{parallel::clusterExport()}}
Ignored if \code{mc = TRUE}.}
}
\description{
Monte Carlo Method Confidence Intervals for Indirect Effect in a Simple Mediation Model Assuming \eqn{t} Distribution
for Data Generated from a Multivariate Normal Distribution (Simulation)
}
\seealso{
Other monte carlo method functions: 
\code{\link{.mcmvn}()},
\code{\link{.mct}()},
\code{\link{mc}()},
\code{\link{mvn_mcmvn_pcci_simulation}()},
\code{\link{mvn_mcmvn_pcci_task}()},
\code{\link{mvn_mcmvn_simulation}()},
\code{\link{mvn_mcmvn_task}()},
\code{\link{mvn_mcmvn}()},
\code{\link{mvn_mct_pcci_simulation}()},
\code{\link{mvn_mct_pcci_task}()},
\code{\link{mvn_mct_simulation}()},
\code{\link{mvn_mct_task}()},
\code{\link{mvn_mct}()},
\code{\link{mvn_std_mcmvnsem_pcci_task}()},
\code{\link{mvn_std_mcmvnsem_simulation}()},
\code{\link{mvn_std_mcmvnsem_task}()},
\code{\link{mvn_std_mcmvnsem}()},
\code{\link{mvn_std_mcmvntb_pcci_simulation}()},
\code{\link{mvn_std_mcmvntb_pcci_task}()},
\code{\link{mvn_std_mcmvntb_simulation}()},
\code{\link{mvn_std_mcmvntb_task}()},
\code{\link{mvn_std_mcmvntb}()},
\code{\link{mvn_std_mctsem_pcci_simulation}()},
\code{\link{mvn_std_mctsem_pcci_task}()},
\code{\link{mvn_std_mctsem_simulation}()},
\code{\link{mvn_std_mctsem_task}()},
\code{\link{mvn_std_mctsem}()},
\code{\link{mvn_std_mcttb_pcci_simulation}()},
\code{\link{mvn_std_mcttb_pcci_task}()},
\code{\link{mvn_std_mcttb_simulation}()},
\code{\link{mvn_std_mcttb_task}()},
\code{\link{mvn_std_mcttb}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{monte carlo method functions}
\keyword{mc}
