% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.R
\name{fit}
\alias{fit}
\title{Fit Simple Mediation Model}
\usage{
fit(
  data,
  alpha = c(0.001, 0.01, 0.05),
  R = 5000,
  B = 5000,
  plot = TRUE,
  par = TRUE,
  ncores = NULL,
  blas_threads = TRUE,
  mc = TRUE,
  lb = FALSE
)
}
\arguments{
\item{data}{\code{n} by 3 matrix or data frame.
\code{data[, 1]} correspond to values for \code{x}.
\code{data[, 2]} correspond to values for \code{m}.
\code{data[, 3]} correspond to values for \code{y}.}

\item{alpha}{Numeric vector.
Alpha level.
By default \code{alpha = c(0.001, 0.01, 0.05)}.}

\item{R}{Integer.
Monte Carlo replications.}

\item{B}{Integer.
Number of bootstrap samples.}

\item{plot}{Logical.
Plot the sampling distribution of the indirect effect.}

\item{par}{Logical.
If \code{TRUE}, use multiple cores.
If \code{FALSE}, use \code{\link[=lapply]{lapply()}}.}

\item{ncores}{Integer.
Number of cores to use if \code{par = TRUE}.
If unspecified, defaults to \code{detectCores() - 1}.}

\item{blas_threads}{Logical.
If \code{TRUE}, set BLAS threads using \code{blas_set_num_threads(threads = blas_get_num_procs())}.
If \code{FALSE}, set BLAS threads using \code{blas_set_num_threads(threads = 1)}.
If \code{par = TRUE}, \code{blas_threads} is automatically set to \code{FALSE}
to prevent conflicts in parallel processing.
This argument is useful when \code{FUN} can handle implicit parallelism
when \code{par = FALSE}, for example linear algebra operations.}

\item{mc}{Logical.
If \code{TRUE}, use \code{\link[parallel:mclapply]{parallel::mclapply()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}} or \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
Ignored if \code{par = FALSE}.}

\item{lb}{Logical.
If \code{TRUE} use \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}}.
Ignored if \code{par = FALSE} and \code{mc = TRUE}.}
}
\description{
Fits the simple mediation model.
}
\details{
The fitted simple mediation model is given by
\deqn{
    y_i
    =
     \hat{\delta}_{y} + \hat{\dot{\tau}} x_i + \hat{\beta} m_i +
     \hat{\varepsilon}_{y_{i}}
  }

\deqn{
    m_i = \hat{\delta}_{m} + \hat{\alpha} x_i + \hat{\varepsilon}_{m_{i}}
  }

The estimated parameters for the mean structure are
\deqn{
    \boldsymbol{\hat{\theta}}_{\text{mean structure}}
    =
     \left\{ \hat{\mu}_{x}, \hat{\delta}_{m}, \hat{\delta}_{y} \right\} .
  }

The estimated parameters for the covariance structure are
\deqn{
    \boldsymbol{\hat{\theta}}_{\text{covariance structure}}
    =
     \left\{ \hat{\dot{\tau}}, \hat{\beta}, \hat{\alpha},
     \hat{\sigma}_{x}^{2}, \hat{\sigma}_{\hat{\varepsilon}_{m}}^{2},
     \hat{\sigma}_{\hat{\varepsilon}_{y}}^{2} \right\} .
  }
}
\examples{
data <- jeksterslabRdatarepo::thirst
fit(data, par = FALSE)
}
\seealso{
Other model fit functions: 
\code{\link{.fitfiml}()},
\code{\link{.fitsem}()},
\code{\link{.fit}()},
\code{\link{mvn_fitfiml_mar_simulation}()},
\code{\link{mvn_fitfiml_mar_task}()},
\code{\link{mvn_fitfiml_mar}()},
\code{\link{mvn_fitfiml_mcar_simulation}()},
\code{\link{mvn_fitfiml_mcar_task}()},
\code{\link{mvn_fitfiml_mcar}()},
\code{\link{mvn_fitols_simulation_summary}()},
\code{\link{mvn_fitols_simulation}()},
\code{\link{mvn_fitols_task_summary}()},
\code{\link{mvn_fitols_task}()},
\code{\link{mvn_fitols}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{model fit functions}
\keyword{fit}
