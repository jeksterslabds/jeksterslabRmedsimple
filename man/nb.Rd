% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nb.R
\name{nb}
\alias{nb}
\title{Nonparametric Bootstrapping}
\usage{
nb(
  data,
  std = FALSE,
  B = 200,
  alphahatbetahat,
  alpha = c(0.001, 0.01, 0.05),
  plot = TRUE,
  par = TRUE,
  ncores = NULL,
  blas_threads = TRUE,
  mc = TRUE,
  lb = FALSE
)
}
\arguments{
\item{data}{\code{n} by 3 matrix or data frame.
\code{data[, 1]} correspond to values for \code{x}.
\code{data[, 2]} correspond to values for \code{m}.
\code{data[, 3]} correspond to values for \code{y}.}

\item{std}{Logical.
Standardize the indirect effect \eqn{\alphahat \betahat \frac{\sigma_x}{\sigma_y}}.}

\item{B}{Integer.
Number of bootstrap samples.}

\item{alphahatbetahat}{Numeric.
Estimate of the indirect effect \eqn{\left( \hat{\alpha} \hat{\beta} \right)}.}

\item{alpha}{Numeric vector.
Alpha level.
By default \code{alpha = c(0.001, 0.01, 0.05)}.}

\item{plot}{Logical.
Plot the sampling distribution of the indirect effect.}

\item{par}{Logical.
If \code{TRUE}, use multiple cores.
If \code{FALSE}, use \code{\link[=lapply]{lapply()}}.}

\item{ncores}{Integer.
Number of cores to use if \code{par = TRUE}.
If unspecified, defaults to \code{detectCores() - 1}.}

\item{blas_threads}{Logical.
If \code{TRUE}, set BLAS threads using \code{blas_set_num_threads(threads = blas_get_num_procs())}.
If \code{FALSE}, set BLAS threads using \code{blas_set_num_threads(threads = 1)}.
If \code{par = TRUE}, \code{blas_threads} is automatically set to \code{FALSE}
to prevent conflicts in parallel processing.
This argument is useful when \code{FUN} can handle implicit parallelism
when \code{par = FALSE}, for example linear algebra operations.}

\item{mc}{Logical.
If \code{TRUE}, use \code{\link[parallel:mclapply]{parallel::mclapply()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}} or \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
Ignored if \code{par = FALSE}.}

\item{lb}{Logical.
If \code{TRUE} use \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}}.
Ignored if \code{par = FALSE} and \code{mc = TRUE}.}
}
\description{
Nonparametric Bootstrapping
}
\examples{
data <- jeksterslabRdatarepo::thirst
alphahatbetahat <- .fit(data, minimal = TRUE)
nb(data = data, B = 5000, alphahatbetahat = alphahatbetahat, par = FALSE)
alphahatbetahat <- .fit(data, minimal = TRUE, std = TRUE)
nb(data = data, std = TRUE, B = 5000, alphahatbetahat = alphahatbetahat, par = FALSE)
}
\seealso{
Other nonparametric functions: 
\code{\link{.nb}()},
\code{\link{mvn_nb_bcaci_simulation}()},
\code{\link{mvn_nb_bcaci_task}()},
\code{\link{mvn_nb_bcci_simulation}()},
\code{\link{mvn_nb_bcci_task}()},
\code{\link{mvn_nb_pcci_simulation}()},
\code{\link{mvn_nb_pcci_task}()},
\code{\link{mvn_nb_simulation}()},
\code{\link{mvn_nb_task}()},
\code{\link{mvn_nb}()},
\code{\link{mvn_pbmvn_bcaci_simulation}()},
\code{\link{mvn_pbmvn_bcaci_task}()},
\code{\link{mvn_pbmvn_bcci_simulation}()},
\code{\link{mvn_pbmvn_bcci_task}()},
\code{\link{mvn_std_nb_bcaci_simulation}()},
\code{\link{mvn_std_nb_bcaci_task}()},
\code{\link{mvn_std_nb_bcci_simulation}()},
\code{\link{mvn_std_nb_bcci_task}()},
\code{\link{mvn_std_nb_pcci_simulation}()},
\code{\link{mvn_std_nb_pcci_task}()},
\code{\link{mvn_std_nb_simulation}()},
\code{\link{mvn_std_nb_task}()},
\code{\link{mvn_std_nb}()},
\code{\link{mvn_std_pbmvn_bcaci_simulation}()},
\code{\link{mvn_std_pbmvn_bcaci_task}()},
\code{\link{mvn_std_pbmvn_bcci_simulation}()},
\code{\link{mvn_std_pbmvn_bcci_task}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{nonparametric functions}
\keyword{nb}
