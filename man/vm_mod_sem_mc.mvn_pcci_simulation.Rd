% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vm_mod_complete_unstd_sem_mc.mvn.R
\name{vm_mod_sem_mc.mvn_pcci_simulation}
\alias{vm_mod_sem_mc.mvn_pcci_simulation}
\title{Monte Carlo Method Confidence Intervals Assuming Multivariate Normal Distribution for Indirect Effect in a Simple Mediation Model
for Data Generated Using the Vale and Maurelli (1983) Approach (Skewness = 2, Kurtosis = 7)
(Simulation)}
\usage{
vm_mod_sem_mc.mvn_pcci_simulation(
  dir = getwd(),
  all = TRUE,
  taskid = NULL,
  par = TRUE,
  ncores = NULL,
  blas_threads = TRUE,
  mc = TRUE,
  lb = FALSE,
  cl_eval = FALSE,
  cl_export = FALSE,
  cl_expr,
  cl_vars
)
}
\arguments{
\item{dir}{Character string.
Directory where results of \verb{vm_mod_dat_*} are stored.}

\item{all}{Logical.
Process all results.}

\item{taskid}{Numeric.
Task ID.}

\item{par}{Logical.
If \code{TRUE}, use multiple cores.
If \code{FALSE}, use \code{\link[=lapply]{lapply()}}.}

\item{ncores}{Integer.
Number of cores to use if \code{par = TRUE}.
If unspecified, defaults to \code{detectCores() - 1}.}

\item{blas_threads}{Logical.
If \code{TRUE}, set BLAS threads using \code{blas_set_num_threads(threads = blas_get_num_procs())}.
If \code{FALSE}, set BLAS threads using \code{blas_set_num_threads(threads = 1)}.
If \code{par = TRUE}, \code{blas_threads} is automatically set to \code{FALSE}
to prevent conflicts in parallel processing.
This argument is useful when \code{FUN} can handle implicit parallelism
when \code{par = FALSE}, for example linear algebra operations.}

\item{mc}{Logical.
If \code{TRUE}, use \code{\link[parallel:mclapply]{parallel::mclapply()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}} or \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
Ignored if \code{par = FALSE}.}

\item{lb}{Logical.
If \code{TRUE} use \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}}.
If \code{FALSE}, use \code{\link[parallel:clusterApply]{parallel::parLapply()}}.
Ignored if \code{par = FALSE} and \code{mc = TRUE}.}

\item{cl_eval}{Logical.
Execute \code{\link[parallel:clusterApply]{parallel::clusterEvalQ()}} using \code{cl_expr}.
Ignored if \code{mc = TRUE}.}

\item{cl_export}{Logical.
Execute \code{\link[parallel:clusterApply]{parallel::clusterExport()}} using \code{cl_vars}.
Ignored if \code{mc = TRUE}.}

\item{cl_expr}{Expression.
Expression passed to \code{\link[parallel:clusterApply]{parallel::clusterEvalQ()}}
Ignored if \code{mc = TRUE}.}

\item{cl_vars}{Character vector.
Names of objects to pass to \code{\link[parallel:clusterApply]{parallel::clusterExport()}}
Ignored if \code{mc = TRUE}.}
}
\description{
Monte Carlo Method Confidence Intervals Assuming Multivariate Normal Distribution for Indirect Effect in a Simple Mediation Model
for Data Generated Using the Vale and Maurelli (1983) Approach (Skewness = 2, Kurtosis = 7)
(Simulation)
}
\seealso{
Other monte carlo method functions: 
\code{\link{mc.mvn}()},
\code{\link{mc.t}()},
\code{\link{mc.wishart}()},
\code{\link{mvn_mar_10_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mar_10_mc.mvn_pcci_task}()},
\code{\link{mvn_mar_10_mc.mvn_simulation}()},
\code{\link{mvn_mar_10_mc.mvn_task}()},
\code{\link{mvn_mar_10_mc.mvn}()},
\code{\link{mvn_mar_20_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mar_20_mc.mvn_pcci_task}()},
\code{\link{mvn_mar_20_mc.mvn_simulation}()},
\code{\link{mvn_mar_20_mc.mvn_task}()},
\code{\link{mvn_mar_20_mc.mvn}()},
\code{\link{mvn_mar_30_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mar_30_mc.mvn_pcci_task}()},
\code{\link{mvn_mar_30_mc.mvn_simulation}()},
\code{\link{mvn_mar_30_mc.mvn_task}()},
\code{\link{mvn_mar_30_mc.mvn}()},
\code{\link{mvn_mcar_10_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mcar_10_mc.mvn_pcci_task}()},
\code{\link{mvn_mcar_10_mc.mvn_simulation}()},
\code{\link{mvn_mcar_10_mc.mvn_task}()},
\code{\link{mvn_mcar_10_mc.mvn}()},
\code{\link{mvn_mcar_20_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mcar_20_mc.mvn_pcci_task}()},
\code{\link{mvn_mcar_20_mc.mvn_simulation}()},
\code{\link{mvn_mcar_20_mc.mvn_task}()},
\code{\link{mvn_mcar_20_mc.mvn}()},
\code{\link{mvn_mcar_30_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mcar_30_mc.mvn_pcci_task}()},
\code{\link{mvn_mcar_30_mc.mvn_simulation}()},
\code{\link{mvn_mcar_30_mc.mvn_task}()},
\code{\link{mvn_mcar_30_mc.mvn}()},
\code{\link{mvn_mnar_10_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mnar_10_mc.mvn_pcci_task}()},
\code{\link{mvn_mnar_10_mc.mvn_simulation}()},
\code{\link{mvn_mnar_10_mc.mvn_task}()},
\code{\link{mvn_mnar_10_mc.mvn}()},
\code{\link{mvn_mnar_20_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mnar_20_mc.mvn_pcci_task}()},
\code{\link{mvn_mnar_20_mc.mvn_simulation}()},
\code{\link{mvn_mnar_20_mc.mvn_task}()},
\code{\link{mvn_mnar_20_mc.mvn}()},
\code{\link{mvn_mnar_30_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mnar_30_mc.mvn_pcci_task}()},
\code{\link{mvn_mnar_30_mc.mvn_simulation}()},
\code{\link{mvn_mnar_30_mc.mvn_task}()},
\code{\link{mvn_mnar_30_mc.mvn}()},
\code{\link{mvn_ols_mc.mvn_pcci_simulation}()},
\code{\link{mvn_ols_mc.mvn_pcci_task}()},
\code{\link{mvn_ols_mc.mvn_simulation}()},
\code{\link{mvn_ols_mc.mvn_task}()},
\code{\link{mvn_ols_mc.mvn}()},
\code{\link{mvn_sem_mc.mvn_pcci_simulation}()},
\code{\link{mvn_sem_mc.mvn_pcci_task}()},
\code{\link{mvn_sem_mc.mvn_simulation}()},
\code{\link{mvn_sem_mc.mvn_task}()},
\code{\link{mvn_sem_mc.mvn}()},
\code{\link{mvn_std_mc.mvn.delta_pcci_simulation}()},
\code{\link{mvn_std_mc.mvn.delta_pcci_task}()},
\code{\link{mvn_std_mc.mvn.delta_simulation}()},
\code{\link{mvn_std_mc.mvn.delta_task}()},
\code{\link{mvn_std_mc.mvn.delta}()},
\code{\link{mvn_std_mc.mvn.sem_pcci_simulation}()},
\code{\link{mvn_std_mc.mvn.sem_pcci_task}()},
\code{\link{mvn_std_mc.mvn.sem_simulation}()},
\code{\link{mvn_std_mc.mvn.sem_task}()},
\code{\link{mvn_std_mc.mvn.sem}()},
\code{\link{mvn_std_mc.mvn.tb_pcci_simulation}()},
\code{\link{mvn_std_mc.mvn.tb_pcci_task}()},
\code{\link{mvn_std_mc.mvn.tb_simulation}()},
\code{\link{mvn_std_mc.mvn.tb_task}()},
\code{\link{mvn_std_mc.mvn.tb}()},
\code{\link{mvn_std_mc.wishart_pcci_simulation}()},
\code{\link{mvn_std_mc.wishart_pcci_task}()},
\code{\link{mvn_std_mc.wishart_simulation}()},
\code{\link{mvn_std_mc.wishart_task}()},
\code{\link{mvn_std_mc.wishart}()},
\code{\link{vm_mod_ols_mc.mvn_pcci_simulation}()},
\code{\link{vm_mod_ols_mc.mvn_pcci_task}()},
\code{\link{vm_mod_ols_mc.mvn_simulation}()},
\code{\link{vm_mod_ols_mc.mvn_task}()},
\code{\link{vm_mod_ols_mc.mvn}()},
\code{\link{vm_mod_sem_mc.mvn_pcci_task}()},
\code{\link{vm_mod_sem_mc.mvn_simulation}()},
\code{\link{vm_mod_sem_mc.mvn_task}()},
\code{\link{vm_mod_sem_mc.mvn}()},
\code{\link{vm_sev_ols_mc.mvn_pcci_simulation}()},
\code{\link{vm_sev_ols_mc.mvn_pcci_task}()},
\code{\link{vm_sev_ols_mc.mvn_simulation}()},
\code{\link{vm_sev_ols_mc.mvn_task}()},
\code{\link{vm_sev_ols_mc.mvn}()},
\code{\link{vm_sev_sem_mc.mvn_pcci_simulation}()},
\code{\link{vm_sev_sem_mc.mvn_pcci_task}()},
\code{\link{vm_sev_sem_mc.mvn_simulation}()},
\code{\link{vm_sev_sem_mc.mvn_task}()},
\code{\link{vm_sev_sem_mc.mvn}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{monte carlo method functions}
\keyword{mc}
