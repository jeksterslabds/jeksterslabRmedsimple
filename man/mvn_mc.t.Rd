% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mvn_complete_unstd_mc.t.R
\name{mvn_mc.t}
\alias{mvn_mc.t}
\title{Monte Carlo Method Assuming Student's t Distribution for Indirect Effect in a Simple Mediation Model
for Data Generated from a Multivariate Normal Distribution}
\usage{
mvn_mc.t(taskid, R = 20000L, alphahat, sehatalphahat, betahat, sehatbetahat, n)
}
\arguments{
\item{taskid}{Numeric.
Task ID.}

\item{R}{Integer.
Monte Carlo replications.}

\item{alphahat}{Numeric.
Estimated slope of path from \code{x} to \code{m} \eqn{\left( \hat{\alpha} \right)} .}

\item{sehatalphahat}{Numeric.
Estimated standard error of slope of path from \code{x} to \code{m} \eqn{\left( \widehat{se}_{\hat{\alpha}} \right)} .}

\item{betahat}{Numeric.
Estimated slope of path from \code{m} to \code{y} \eqn{\left( \hat{\beta} \right)} .}

\item{sehatbetahat}{Numeric.
Estimated standard error of slope of path from \code{m} to \code{y} \eqn{\left( \widehat{se}_{\hat{\beta}} \right)} .}

\item{n}{Integer.
Sample size.}
}
\description{
Monte Carlo Method Assuming Student's t Distribution for Indirect Effect in a Simple Mediation Model
for Data Generated from a Multivariate Normal Distribution
}
\examples{
taskid <- 1
data <- mvn_dat(taskid = taskid)
n <- nrow(data)
fit.ols(data = data, minimal = TRUE)

# OLS -------------------------------------------------------------
## Unstandardized -------------------------------------------------

fit <- mvn_fit.ols(data = data, taskid = taskid)
unstd <- mvn_mc.t(
  taskid = taskid, R = 20000L,
  alphahat = fit["alphahat"], sehatalphahat = fit["sehatalphahat"],
  betahat = fit["betahat"], sehatbetahat = fit["sehatbetahat"], n = n
)
hist(unstd)

## Standardized Textbook ------------------------------------------

tb <- mvn_mc.t(
  taskid = taskid, R = 20000L,
  alphahat = fit["alphahatprime"], sehatalphahat = fit["sehatalphahatprimetb"],
  betahat = fit["betahatprime"], sehatbetahat = fit["sehatbetahatprimetb"], n = n
)
hist(tb)

## Standardized Delta ---------------------------------------------

delta <- mvn_mc.t(
  taskid = taskid, R = 20000L,
  alphahat = fit["alphahatprime"], sehatalphahat = fit["sehatalphahatprimedelta"],
  betahat = fit["betahatprime"], sehatbetahat = fit["sehatbetahatprimedelta"], n = n
)
hist(delta)

# SEM -------------------------------------------------------------

## Standardized ---------------------------------------------------

fit <- mvn_std_fit.sem(data = data, taskid = taskid)
std <- mvn_mc.t(
  taskid = taskid, R = 20000L,
  alphahat = fit["alphahatprime"], sehatalphahat = fit["sehatalphahatprime"],
  betahat = fit["betahatprime"], sehatbetahat = fit["sehatbetahatprime"], n = n
)
hist(std)
}
\seealso{
Other monte carlo method functions: 
\code{\link{mc.mvn}()},
\code{\link{mc.t}()},
\code{\link{mvn_mar_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mar_mc.mvn_pcci_task}()},
\code{\link{mvn_mar_mc.mvn_simulation}()},
\code{\link{mvn_mar_mc.mvn_task}()},
\code{\link{mvn_mar_mc.mvn}()},
\code{\link{mvn_mar_std_mc.mvn.sem_pcci_simulation}()},
\code{\link{mvn_mar_std_mc.mvn.sem_pcci_task}()},
\code{\link{mvn_mar_std_mc.mvn.sem_simulation}()},
\code{\link{mvn_mar_std_mc.mvn.sem_task}()},
\code{\link{mvn_mar_std_mc.mvn.sem}()},
\code{\link{mvn_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mc.mvn_pcci_task}()},
\code{\link{mvn_mc.mvn_simulation}()},
\code{\link{mvn_mc.mvn_task}()},
\code{\link{mvn_mc.mvn}()},
\code{\link{mvn_mc.t_pcci_simulation}()},
\code{\link{mvn_mc.t_pcci_task}()},
\code{\link{mvn_mc.t_simulation}()},
\code{\link{mvn_mc.t_task}()},
\code{\link{mvn_mcar_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mcar_mc.mvn_pcci_task}()},
\code{\link{mvn_mcar_mc.mvn_simulation}()},
\code{\link{mvn_mcar_mc.mvn_task}()},
\code{\link{mvn_mcar_mc.mvn}()},
\code{\link{mvn_mcar_std_mc.mvn.sem_pcci_simulation}()},
\code{\link{mvn_mcar_std_mc.mvn.sem_pcci_task}()},
\code{\link{mvn_mcar_std_mc.mvn.sem_simulation}()},
\code{\link{mvn_mcar_std_mc.mvn.sem_task}()},
\code{\link{mvn_mcar_std_mc.mvn.sem}()},
\code{\link{mvn_mnar_mc.mvn_pcci_simulation}()},
\code{\link{mvn_mnar_mc.mvn_pcci_task}()},
\code{\link{mvn_mnar_mc.mvn_simulation}()},
\code{\link{mvn_mnar_mc.mvn_task}()},
\code{\link{mvn_mnar_mc.mvn}()},
\code{\link{mvn_mnar_std_mc.mvn.sem_pcci_simulation}()},
\code{\link{mvn_mnar_std_mc.mvn.sem_pcci_task}()},
\code{\link{mvn_mnar_std_mc.mvn.sem_simulation}()},
\code{\link{mvn_mnar_std_mc.mvn.sem_task}()},
\code{\link{mvn_mnar_std_mc.mvn.sem}()},
\code{\link{mvn_std_mc.mvn.delta_pcci_simulation}()},
\code{\link{mvn_std_mc.mvn.delta_pcci_task}()},
\code{\link{mvn_std_mc.mvn.delta_simulation}()},
\code{\link{mvn_std_mc.mvn.delta_task}()},
\code{\link{mvn_std_mc.mvn.delta}()},
\code{\link{mvn_std_mc.mvn.sem_pcci_simulation}()},
\code{\link{mvn_std_mc.mvn.sem_pcci_task}()},
\code{\link{mvn_std_mc.mvn.sem_simulation}()},
\code{\link{mvn_std_mc.mvn.sem_task}()},
\code{\link{mvn_std_mc.mvn.sem}()},
\code{\link{mvn_std_mc.mvn.tb_pcci_simulation}()},
\code{\link{mvn_std_mc.mvn.tb_pcci_task}()},
\code{\link{mvn_std_mc.mvn.tb_simulation}()},
\code{\link{mvn_std_mc.mvn.tb_task}()},
\code{\link{mvn_std_mc.mvn.tb}()},
\code{\link{mvn_std_mc.t.delta_pcci_simulation}()},
\code{\link{mvn_std_mc.t.delta_pcci_task}()},
\code{\link{mvn_std_mc.t.delta_simulation}()},
\code{\link{mvn_std_mc.t.delta_task}()},
\code{\link{mvn_std_mc.t.delta}()},
\code{\link{mvn_std_mc.t.sem_pcci_simulation}()},
\code{\link{mvn_std_mc.t.sem_pcci_task}()},
\code{\link{mvn_std_mc.t.sem_simulation}()},
\code{\link{mvn_std_mc.t.sem_task}()},
\code{\link{mvn_std_mc.t.sem}()},
\code{\link{mvn_std_mc.t.tb_pcci_simulation}()},
\code{\link{mvn_std_mc.t.tb_pcci_task}()},
\code{\link{mvn_std_mc.t.tb_simulation}()},
\code{\link{mvn_std_mc.t.tb_task}()},
\code{\link{mvn_std_mc.t.tb}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{monte carlo method functions}
\keyword{mvn_complete_unstd}
